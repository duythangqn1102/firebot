#!/usr/bin/perl
use strict;
use warnings FATAL => 'all';
use autodie;

use FindBin '$RealBin';
use File::Slurp;
use Net::IRC;

my %channels =
    map { lc($_) => 0 }
    map { /^channels=(#.+)/; $1 }
    grep { /^channels=/ }
    read_file("$RealBin/../mozbot.pl.cfg");
my %nick_count;
die "no channels" unless scalar keys %channels;

my $irc = Net::IRC->new();
$irc->debug(0);
my $conn = $irc->newconn(
    Nick    => 'listbot',
    Server  => 'irc.mozilla.org',
);

$conn->add_handler(
    [ 376, 422 ], # MOTD
    sub {
        my ($self) = @_;
        # > LIST
        # < You cannot list within the first 60 seconds of connecting
        print "sleeping for 70 seconds..\n";
        $self->schedule(70, sub { $self->sl('LIST') });
    }
);
$conn->add_handler(
    [ 322 ], # LIST line
    sub {
        my ($self, $event) = @_;
        my (undef, $channel, $count) = $event->args;
        $channel = lc($channel);
        return unless exists $channels{$channel};
        $nick_count{$channel} = $count;
        print $channel, ' ', $nick_count{$channel}, "\n";
        delete $channels{$channel};
    }
);
$conn->add_handler(
    [ 323 ], # LIST end
    sub {
        my ($self) = @_;
        done($self);
    }
);
$conn->add_handler(
    [ 353 ], # JOIN line
    sub {
        my ($self, $event) = @_;
        my (undef, undef, $channel, $nicks) = $event->args;
        $channel = lc($channel);
        $nick_count{$channel} //= 0;
        $nick_count{$channel} += scalar(split(/ /, $nicks));
        print $channel, ' ', $nick_count{$channel}, "\n";
    }
);
# <<< :belew.mozilla.org 475 listbot #glob :Cannot join channel (Incorrect channel key)
$conn->add_handler(
    [ 475 ], # JOIN fail
    sub {
        my ($self, $event) = @_;
        my (undef, $channel, $reason) = $event->args;
        $channel = lc($channel);
        delete $channels{$channel};
        print $channel, " join failed: $reason\n";
        done($self);
    }
);
$conn->add_handler(
    [ 366 ], # JOIN end
    sub {
        my ($self, $event) = @_;
        my (undef, $channel) = $event->args;
        $channel = lc($channel);
        delete $channels{$channel};
        done($self);
    }
);

$SIG{__DIE__} = sub {
    my ($error) = @_;
    exit if $error =~ /No active connections left/;
    die $error;
};

print "connecting..\n";
$irc->start();

sub done {
    my ($self) = @_;

    # some channels require us to join to get the count
    my $completed = !(scalar keys %channels);
    foreach my $channel (sort keys %channels) {
        next if $channels{$channel};
        $self->sl("JOIN $channel");
        $channels{$channel} = 1;
    }
    return unless $completed;

    $self->quit();
    print "\n";

    my @channels = sort {
        $nick_count{$b} <=> $nick_count{$a}
        || $a cmp $b
    } keys %nick_count;
    foreach my $channel (@channels) {
        my $count = $nick_count{$channel};
        next if $count > 5;
        printf "%s %s\n", ($count ? $count : '?'), $channel;
    }
}
