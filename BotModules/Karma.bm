################################
# Karma Module                 #
################################

package BotModules::Karma;
use strict;
use base 'BotModules';
1;

sub Initialise {
    my $self = shift;
    $self->{dbh} = $self->sqlite();
    $self->{dbh}->do("CREATE TABLE IF NOT EXISTS scores(nick CHAR COLLATE NOCASE, score INT)");
    $self->{dbh}->do("CREATE UNIQUE INDEX IF NOT EXISTS scores_nick_idx ON scores(nick COLLATE NOCASE)");
}

sub Unload {
    my $self = shift;
    delete $self->{dbh};
}

sub RegisterConfig {
    my $self = shift;
    $self->SUPER::RegisterConfig(@_);
    $self->registerVariables(
        # [ name, save?, settable? ]
        ['secondsDelayRequired', 1, 1, 20],
        ['_lastspoken', 0, 0, {}], # nick => nick => time
        ['ranklimit', 1, 1, 10], # ranklimit is changeable if anyone want it smaller or higher
        ['blacklist', 1, 1, []], # list of lowercase nicks who aren't permitted to have karma
    );
}

sub Help {
    my $self = shift;
    my ($event) = @_;
    return {
        '' => 'A karma tracker. Use the \'karma\' command to find someone\'s karma rank.',
        '++' => 'Increase someone\'s karma. Syntax: victim++',
        '--' => 'Decrease someone\'s karma. Syntax: victim--',
        'karma' => 'Find someone\'s karma level. Omit the victim\'s name to get top users. Syntax: \'karma victim\' or just \'karma\'',
    };
}

sub Told {
    my $self = shift;
    my ($event, $message) = @_;
    # XXX this should support multiple rank changes in a single message, but
    # only if that message contains just rank changes.
    # eg. Tony_6++ johnb++ johnb++ ryanc++ jlaz++
=cut
    if ($message =~ /^(?:\s*\S+(?:--|\+\+))+\s*$/) {
        while ($message =~ /\s*(\S+)(--|\+\+)/g) {
            $self->ChangeKarma($event, $1, $2 eq '++' ? 1 : -1);
        }

    elsif ($message =~ /^\s*(karma|rank|ranks)\s*$/i) {
        $self->ReportKarmaRanks($event);

    elsif ($message =~ /$message =~ /^\s*(?:karma|rank)\s+(\S+)\s*$/i) {
        $self->ReportKarma($event, $1);
=cut
    #
    if ($message =~ /^(\S+)\+\+$/os) {
        $self->ChangeKarma($event, $1, 1);

    } elsif ($message =~ /^(\S+)\-\-$/os) {
        $self->ChangeKarma($event, $1, -1);

    } elsif ($message =~ /^\s*(?:karma\s+)?ranks?[?\s]*$/os) {
        # eww, nasty regex.  /^\s*(karma|rank|ranks)\s*$/i
        $self->ReportKarmaRanks($event, $1);  # $1 is ignored, thankfully because it's not defined

    } elsif ($message =~ /^\s*karma(?:\s+rank)?\s+([^\s\?]+)[?\s]*$/os or $message =~ /^\s*(?:karma\s+)?rank\s+([^\s\?]+)[?\s]*$/os) {
        # /^\s*(?:karma|rank)\s+(\S+)/i
        $self->ReportKarma($event, $1);

    } else {
        return $self->SUPER::Told(@_);
    }
    return 0;
}

sub Heard {
    my $self = shift;
    my ($event, $message) = @_;
    if ($message =~ /^(\S*[^-+\s])\+\+$/os) {
        $self->ChangeKarma($event, $1, 1);
    } elsif ($message =~ /^(\S*[^-+\s])\-\-$/os) {
        $self->ChangeKarma($event, $1, -1);
    } else {
        return $self->SUPER::Told(@_);
    }
    return 0;
}

sub ChangeKarma {
    my $self = shift;
    my ($event, $who, $delta) = @_;
    $self->debug("$who += $delta requested");

    if (grep { $_ eq lc $who } @{$self->{'blacklist'}}) {
        $self->debug("$who is blacklisted. Ignoring karma change request.");
        return 1;
    }

    if (defined($self->{'_lastSpoken'}->{$event->{'user'}})
        and defined($self->{'_lastSpoken'}->{$event->{'user'}}->{lc $who})
        and (($event->{'time'} - $self->{'_lastSpoken'}->{$event->{'user'}}->{lc $who}) <= $self->{'secondsDelayRequired'})
    ) {
        $self->{'_lastSpoken'}->{$event->{'user'}}->{lc $who} = $self->{'_lastSpoken'}->{$event->{'user'}}->{lc $who} + 5;
        my $delay = $self->{'secondsDelayRequired'} - ($event->{'time'} - $self->{'_lastSpoken'}->{$event->{'user'}}->{lc $who});
        $self->directSay($event, "You will have to wait another $delay seconds before being able to change ${who}'s karma.");
        return 0;
    }

    if (not defined($self->{'_lastSpoken'}->{$event->{'user'}})) {
        $self->{'_lastSpoken'}->{$event->{'user'}} = {};
    }
    $self->{'_lastSpoken'}->{$event->{'user'}}->{lc $who} = $event->{'time'};

    if (lc $event->{'from'} eq lc $who) {
        if ($delta > 0) {
            $delta = -$delta;
        }
    }

    $self->{dbh}->do(
        "INSERT OR IGNORE INTO scores(nick, score) VALUES (?, ?)",
        undef,
        lc($who), 0
    );
    $self->{dbh}->do(
        "UPDATE scores SET score = score + ? WHERE nick = ?",
        undef,
        $delta, lc($who)
    );
    $self->{dbh}->do(
        "DELETE FROM scores WHERE score = 0"
    );
    return 0;
}

sub ReportKarma {
    my $self = shift;
    my ($event, $who) = @_;

    my ($score) = $self->{dbh}->selectrow_array(
        "SELECT score FROM scores WHERE nick = ?",
        undef,
        lc($who)
    );
    if (!defined $score) {
        $self->say($event, "$who has no karma.");
    } else {
        my ($rank) = $self->{dbh}->selectrow_array(
            "SELECT COUNT(*) FROM (SELECT score FROM scores WHERE score >= ? GROUP BY score ORDER BY score DESC)",
            undef,
            $score
        );
        $self->say($event, "$who has $score points of karma (rank $rank).");
    }
}

sub ReportKarmaRanks {
    my $self = shift;
    my ($event) = @_;

    my $ranks = $self->{dbh}->selectall_arrayref(
        "SELECT score, GROUP_CONCAT(nick) AS nicks FROM scores GROUP BY score ORDER BY score DESC LIMIT ?",
        { Slice => {} },
        $self->{ranklimit}
    );
    return unless @$ranks;
    $self->say($event, "Global rankings (Top $self->{'ranklimit'}):");
    my $rank = 0;
    foreach my $row (@$ranks) {
        $rank++;
        my $nicks = join(',', sort split(',', $row->{nicks}));
        $self->say($event, sprintf('%s. %s (%s)', $rank, $nicks, $row->{score}));
    }
}
