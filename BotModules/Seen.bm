################################
# Seen Module                  #
################################

package BotModules::Seen;
use base 'BotModules';
use strict;

use Time::Duration qw(ago);

# SpottedNickChange would be a nice one to do if you
# can solve the problem of working out which channel
# to say stuff in...

sub Initialise {
    my $self = shift;
    $self->{dbh} = $self->sqlite();
    $self->{dbh}->do("CREATE TABLE IF NOT EXISTS seen(nick CHAR COLLATE NOCASE, time INT, said CHAR)");
    $self->{dbh}->do("CREATE UNIQUE INDEX IF NOT EXISTS seen_nick_idx ON seen(nick COLLATE NOCASE)");
}

sub _set {
    my $self = shift;
    my ($nick, $time, $said) = @_;
    $self->{dbh}->do(
        "INSERT OR REPLACE INTO seen(nick, time, said) VALUES (?, ?, ?)",
        undef,
        lc($nick), $time, $said
    );
}

sub Help {
    my $self = shift;
    my ($event) = @_;
    my %commands = (
        '' => 'The Seen module watches channels and stores when someone last spoke or performed an action for later recall.',
        'seen' => q{Says how long it's been since the last time someone was seen.}
                . q{ Syntax: 'seen <nick>' e.g. 'seen mozbot'.},
    );
    if ($self->isAdmin($event)) {
        $commands{'mute'} = 'Stop responding to !seen <name> in a channel unless told directly. Syntax: mute seen in <channel>';
        $commands{'unmute'} = 'Start responding to !seen <name> in a channel unless told directly.  Syntax: unmute seen in <channel>';
    }
    return \%commands;
}

sub RegisterConfig {
    my $self = shift;
    $self->SUPER::RegisterConfig(@_);
    $self->registerVariables(
      # [ name, save?, settable? ]
        ['overrides', 1, 1, {'therapist' => "Look, dude, I'm feeling fine, mm'k?"}], # canned responses
        ['maxLines', 1, 1, 5],
        ['directOnlyChannels', 1, 1, []], # list of channels where we're only observing and not responding to !seen unless told.
    );
}

sub Told {
    my $self = shift;
    my ($event, $message) = @_;
    my $now = $event->{time};
    $self->{_lastSpoken}->{$event->{user}} = $now;
    if ($event->{channel} ne '') {
        my $channel = $event->{channel};
        $self->_set($event->{from}, $now, "saying '$message' to me in $channel.");
    }
    if ($self->isAdmin($event) and $message =~ /^\s*(un)?mute\s+seen\s+in\s+(\S+)\s*$/osi){
        my $mute = !defined($1);
        my $channel = lc $2;
        $channel =~ s/^\#?/\#/;
        $self->MuteOrUnmuteChannel($event, $mute, $channel);
    } elsif ($message =~ /^\s*!?seen\s+(\S+?)[\s?.!]*$/osi) {
        $self->DoSeen($event, $1);
    } else {
        return $self->SUPER::Told(@_);
    }
    return 0;
}

sub Heard {
    my $self = shift;
    my ($event, $message) = @_;
    if ($event->{channel} ne '') {
        my $channel = $event->{channel};
        $self->_set($event->{from}, $event->{time}, "saying '$message' in $channel.");
    }
    if (!(grep {$event->{'channel'} eq $_} @{$self->{directOnlyChannels}}) and $message =~ /^\s*!seen\s+(\S+)\s*$/osi) {
        $self->DoSeen($event, $1);
    } else {
        return $self->SUPER::Heard(@_);
    }
    return 0;
}

sub Felt {
    my $self = shift;
    my ($event, $message) = @_;
    if ($event->{channel} ne '') {
        my $nick = $event->{from};
        my $channel = $event->{channel};
        $self->_set($event->{from}, $event->{time}, "saying '* $nick $message' in $channel.")
    } else {
        return $self->SUPER::Felt(@_);
    }
    return 0;
}

sub Saw {
    my $self = shift;
    my ($event, $message) = @_;
    if ($event->{channel} ne '') {
        my $nick = $event->{from};
        my $channel = $event->{channel};
        $self->_set($event->{from}, $event->{time}, "saying '* $nick $message' in $channel.");
    } else {
        return $self->SUPER::Felt(@_);
    }
    return 0;
}

sub SpottedNickChange {
    my $self = shift;
    my ($event, $from, $to) = @_;
    $self->_say($event->{from}, $event->{time}, "changing nick to $to.");
    return $self->SUPER::SpottedNickChange(@_);
}

sub DoSeen {
    my $self = shift;
    my ($event, $who) = @_;
    my $pattern;

    if (lc $who eq lc $event->{from}) {
        $self->say($event, "You're right here, duh!");

    } elsif (lc $who eq lc $event->{nick}) {
        $self->say($event, "I'm right here, duh!");

    } elsif (defined($self->{overrides}->{$who})) {
        $self->say($event, $self->{overrides}->{$who});

    } else {
        my $seen = [];
        if ($who =~ m!^/(\S+)/$!) {
            # shouldn't allow mix and match or blank RE or spaces.
            my $regexp = $self->sanitizeRegexp($1);
            $regexp = '(?i:' . $regexp . ')';
            if ('' =~ /$regexp/) {
                # will match everything, throw error.
                $self->say($event, 'That pattern matches everything, please be more specific.');
                return;
            }
            $seen = $self->{dbh}->selectall_arrayref(
                "SELECT nick,time,said FROM seen WHERE nick REGEXP ?",
                { Slice => {} },
                $regexp
            );
            $pattern = 1;

        } else {
            if ($who =~ /\*/) {
                # no point going through the motions if there's no wildcard.
                my $regexp = quotemeta(lc($who));
                # replace the escaped * from quotemeta with a \S*  (XXX wanted: the ? wildcard)
                $regexp =~ s/\\\*/\\S*/g;
                $regexp = '^' . $regexp . '$';
                if ('' =~ /$regexp/) {
                    # will match everything, throw error.
                    $self->say($event, 'That pattern matches everything, please be more specific.');
                    return;
                }
                $seen = $self->{dbh}->selectall_arrayref(
                    "SELECT nick,time,said FROM seen WHERE nick REGEXP ?",
                    { Slice => {} },
                    $regexp
                );

            } else {
                # short circuit for the majority of uses
                $seen = $self->{dbh}->selectall_arrayref(
                    "SELECT nick,time,said FROM seen WHERE nick = ?",
                    { Slice => {} },
                    $who
                );
            }
            $pattern = 0;
        }

        if (@$seen > $self->{maxLines}) {
            # if it's more than the set threshold, don't flood :)
            $self->say($event, "There are more than $self->{maxLines} nicks matching that wildcard, please be more specific.");

        } elsif (@$seen > 0) {
            foreach my $row (@$seen) {
                if ($row->{said} ne '') {
                    $self->say($event, $row->{nick} . ' was last seen ' . ago($event->{time} - $row->{time}));
                } else {
                    $self->say($event, $row->{nick} . ' was last seen ' . ago($event->{time} - $row->{time}) . ', ' . $row->{said});
                }
            }
        } else {
            if ($pattern == 1) {
                $self->say($event, "I've never seen anyone matching the pattern '$who', sorry.");
            } else {
                my $n = $who =~ /^[aeiou]/ ? 'n' : '';
                $self->say($event, "I've never seen a$n '$who', sorry.");
            }
        }
    }
}

sub Unload {
    my $self = shift;
    delete $self->{dbh};
}

sub MuteOrUnmuteChannel {
    my $self = shift;
    my ($event, $mute, $channel) = @_;
    if ($mute) {
        if (grep { $_ eq $channel } @{$self->{directOnlyChannels}}) {
            $self->say($event, "I'm already ignoring !seen <name> in $channel.");
        } else {
            push @{$self->{directOnlyChannels}}, $channel;
            $self->say($event, "I won't respond to !seen <name> in $channel anymore unless told directly.");
            $self->saveConfig();
        }
    } else {
        if (grep { $_ eq $channel } @{$self->{directOnlyChannels}}) {
            @{$self->{directOnlyChannels}} = map { $_ ne $channel } @{$self->{directOnlyChannels}};
            $self->say($event,"I'll start responding to !seen <name> in $channel now.");
            $self->saveConfig();
        } else{
            $self->say($event, "I'm already responding to !seen <name> in $channel.");
        }
    }
}

1;
