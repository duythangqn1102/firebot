package BotModules::TimeIn;
use strict;
use base 'BotModules';

use DateTime;
use DateTime::TimeZone ();
use JSON qw( decode_json );
use List::Util qw( any );
use URI::Escape qw( uri_escape );

sub Initialise {
    my $self = shift;
    $self->{dbh} = $self->sqlite();
    $self->{dbh}->do("CREATE TABLE IF NOT EXISTS places(address CHAR, name CHAR, timezone CHAR)");
    $self->{dbh}->do("CREATE UNIQUE INDEX IF NOT EXISTS places_idx ON places(address COLLATE NOCASE)");

    my %tz_map;
    foreach my $tz (DateTime::TimeZone->all_names()) {
        if ($tz =~ /^([A-Z]{3})\d([A-Z]{3})$/) {
            my ($st, $dt) = ($1, $2);
            $tz_map{lc($st)} = { tz => $tz, name => $st };
            $tz_map{lc($dt)} = { tz => $tz, name => $dt };
        }
        $tz_map{lc($tz)} = { tz => $tz };
    }
    $self->{tz_map} = \%tz_map;
}

sub Unload {
    my $self = shift;
    delete $self->{dbh};
}

sub RegisterConfig {
    my $self = shift;
    $self->SUPER::RegisterConfig(@_);
    $self->registerVariables(
      # [ name, save?, settable?, value ]
        ['apiKey', 1, 1, ''],
    );
}

sub Told {
    my ($self, $event, $message) = @_;

    if ($message =~ /^(time|date)\s+(?:in\s+)?(.+)$/i) {
        my ($mode, $query) = ($1, $2);
        $query =~ s/(^\s+|\s+$)//g;
        $query =~ s/\s+/ /g;

        if (my $tz = $self->{tz_map}->{lc($query)}) {
            # provided a timezone
            $self->time_in($event, { timezone => $tz->{tz}, name => $tz->{name} // $tz->{tz} });
            return 0;

        } elsif ($query =~ /^[\+\-]?\d+$/ && DateTime::TimeZone->offset_as_string($query)) {
            # provided an offset
            $self->time_in($event, { timezone => $query, name => $query });
            return 0;

        } elsif ($self->{apiKey}) {
            # provided a location
            my $cached = $self->{dbh}->selectrow_hashref(
                "SELECT address,name,timezone FROM places WHERE address LIKE ?",
                undef,
                $query,
            );
            if ($cached) {
                $cached->{mode} = $mode;
                $self->time_in($event, $cached);
                return 0;
            }

            my $url = 'https://maps.googleapis.com/maps/api/geocode/json?' .
                join('&',
                    'key=' . uri_escape($self->{apiKey}),
                    '&address=' . uri_escape($query),
                );
            $self->getURI($event, $url, { state => 'geocode', address => $query, mode => $mode });
            return 0;
        }
    }

    if ($message =~ /^\s*now\s*$/i) {
        $self->time_in($event, { timezone => 'UTC', name => 'UTC' });
        return 0;
    }

    return $self->SUPER::Told(@_);
}

sub GotURI {
    my ($self, $event, $uri, $output, $params) = @_;

    my @response;
    if ($params->{state} eq 'geocode') {
        eval {
            my $response = decode_json($output);
            die "geocode: bad status\n" unless $response->{status} eq 'OK';
            my $results = $response->{results};
            die "geocode: no results\n" unless @{$results};
            my $valid_result;
            foreach my $result (@{$results}) {
                foreach my $type (@{ $result->{types} }) {
                    # only locations, not points of interest, businesses, etc
                    if (any { $_ eq $type } qw( locality political postal_code airport )) {
                        $valid_result = $result;
                        last;
                    }
                }
            }
            die "geocode: no valid results\n" unless $valid_result;
            $params->{name} = $valid_result->{formatted_address};
            $params->{lat} = detaint_float($valid_result->{geometry}->{location}->{lat});
            $params->{lng} = detaint_float($valid_result->{geometry}->{location}->{lng});
        };
        if ($@) {
            push @response, "Unable to determine time in '" . $params->{address} . "'";
        } else {
            my $url = 'https://maps.googleapis.com/maps/api/timezone/json?' .
                join('&',
                    'key=' . uri_escape($self->{apiKey}),
                    'location=' . uri_escape($params->{lat} . ',' . $params->{lng}),
                    'timestamp=' . time(),
                );
            $params->{state} = 'timezone';
            $self->getURI($event, $url, $params);
        }

    } elsif ($params->{state} eq 'timezone') {
        eval {
            my $result = decode_json($output);
            die "timezone: bad status\n" unless $result->{status} eq 'OK';
            $params->{timezone} = $result->{timeZoneId};
        };
        if ($@) {
            push @response, "Unable to determine time in '" . $params->{address} . "'";
        } else {
            $self->{dbh}->do(
                "INSERT INTO places(address,name,timezone) VALUES(?,?,?)",
                undef,
                $params->{address}, $params->{name}, $params->{timezone},
            );
            $self->time_in($event, $params);
            return;
        }
    }
    if (@response) {
        $self->say($event, $event->{from} . ': ' . join(' ', @response));
    }
}

sub time_in {
    my ($self, $event, $params) = @_;
    my $dt;
    eval {
        $dt = DateTime->now->set_time_zone($params->{timezone});
    };
    if ($@) {
        $self->say(
            $event,
            sprintf(
                "%s: Unable to determine time in '%s'",
                $event->{from},
                $params->{address},
            )
        );
    } else {
        my $format = $params->{mode} eq 'date' ? 'd MMM yyyy' : 'h:mma';
        $self->say(
            $event,
            sprintf(
                '%s: It is %s in %s',
                $event->{from},
                lc($dt->format_cldr($format)),
                $params->{name},
            )
        );
    }
}

sub detaint_float {
    my ($f) = @_;
    return 0 unless $f =~ /^(-?\d+(?:\.\d+)?)$/;
    return $1;
}

1;
